{
  "_from": "avsc@^5.4.15",
  "_id": "avsc@5.4.15",
  "_inBundle": false,
  "_integrity": "sha512-kN7Og+NCK4TBFUeRxQc0UeTJu087mhtrwvZ9PB0ObpyKrb6x2jv+N49t1f0hjXOGRtOiWHdlyTaWPRAF1e3nrg==",
  "_location": "/avsc",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "avsc",
    "fetchSpec": "^5.4.15",
    "name": "avsc",
    "raw": "avsc@^5.4.15",
    "rawSpec": "^5.4.15",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/avsc/-/avsc-5.4.15.tgz",
  "_shasum": "c8f215d3df1905b51c52a1c47e814da35c98121a",
  "_shrinkwrap": null,
  "_spec": "avsc@^5.4.15",
  "_where": "/Users/junlanlu/Documents/CMPE 273/grubHub-prototype-app/Grubhub/restaurant_owner/Backend",
  "author": {
    "email": "mtth@apache.org",
    "name": "Matthieu Monsch"
  },
  "browser": {
    "./lib": "./etc/browser/avsc.js",
    "./lib/files": "./etc/browser/lib/files.js",
    "crypto": "./etc/browser/lib/crypto.js"
  },
  "bugs": {
    "url": "https://github.com/mtth/avsc/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Avro for JavaScript",
  "devDependencies": {
    "benchmark": "~2.1.4",
    "coveralls": "^3.0.4",
    "mocha": "^5.2.0",
    "nyc": "~14.1.1",
    "tmp": "^0.0.33"
  },
  "engines": {
    "node": ">=0.11"
  },
  "files": [
    "etc/browser",
    "lib",
    "types"
  ],
  "homepage": "https://github.com/mtth/avsc",
  "keywords": [
    "api",
    "avdl",
    "avpr",
    "avro",
    "avsc",
    "binary",
    "buffer",
    "data",
    "decoding",
    "encoding",
    "idl",
    "interface",
    "ipc",
    "json",
    "marshalling",
    "message",
    "protocol",
    "rpc",
    "schema",
    "serde",
    "serialization",
    "type"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "avsc",
  "optionalDependencies": {},
  "readme": "# Avsc [![NPM version](https://img.shields.io/npm/v/avsc.svg)](https://www.npmjs.com/package/avsc) [![Download count](https://img.shields.io/npm/dm/avsc.svg)](https://www.npmjs.com/package/avsc) [![Build status](https://travis-ci.org/mtth/avsc.svg?branch=master)](https://travis-ci.org/mtth/avsc) [![Coverage status](https://coveralls.io/repos/mtth/avsc/badge.svg?branch=master&service=github)](https://coveralls.io/github/mtth/avsc?branch=master)\n\nPure JavaScript implementation of the [Avro\nspecification](https://avro.apache.org/docs/current/spec.html).\n\n\n## Features\n\n+ Blazingly [fast and compact][benchmarks] serialization! Typically faster than\n  JSON with much smaller encodings.\n+ All the Avro goodness and more: [type inference][type-inference], [schema\n  evolution][schema-evolution], and [remote procedure calls][rpc].\n+ Support for [serializing arbitrary JavaScript objects][logical-types].\n+ Unopinionated [64-bit integer compatibility][custom-long].\n\n\n## Installation\n\n```bash\n$ npm install avsc\n```\n\n`avsc` is compatible with all versions of [node.js][] since `0.11` and major\nbrowsers via [browserify][]. For convenience, you can also find compiled\ndistributions with the [releases][] (but please host your own copy).\n\n\n## Documentation\n\n+ [Home][home]\n+ [API](https://github.com/mtth/avsc/wiki/API)\n+ [Quickstart](https://github.com/mtth/avsc/wiki/Quickstart)\n+ [Advanced usage](https://github.com/mtth/avsc/wiki/Advanced-usage)\n+ [Benchmarks][benchmarks]\n\n\n## Examples\n\nInside a node.js module, or using browserify:\n\n```javascript\nconst avro = require('avsc');\n```\n\n+ Encode and decode values from a known schema:\n\n  ```javascript\n  const type = avro.Type.forSchema({\n    type: 'record',\n    fields: [\n      {name: 'kind', type: {type: 'enum', symbols: ['CAT', 'DOG']}},\n      {name: 'name', type: 'string'}\n    ]\n  });\n\n  const buf = type.toBuffer({kind: 'CAT', name: 'Albert'}); // Encoded buffer.\n  const val = type.fromBuffer(buf); // = {kind: 'CAT', name: 'Albert'}\n  ```\n\n+ Infer a value's schema and encode similar values:\n\n  ```javascript\n  const type = avro.Type.forValue({\n    city: 'Cambridge',\n    zipCodes: ['02138', '02139'],\n    visits: 2\n  });\n\n  // We can use `type` to encode any values with the same structure:\n  const bufs = [\n    type.toBuffer({city: 'Seattle', zipCodes: ['98101'], visits: 3}),\n    type.toBuffer({city: 'NYC', zipCodes: [], visits: 0})\n  ];\n  ```\n\n+ Get a [readable stream][readable-stream] of decoded values from an Avro\n  container file compressed using [Snappy][snappy] (see the [`BlockDecoder`\n  API][decoder-api] for an example including checksum validation):\n\n  ```javascript\n  const snappy = require('snappy'); // Or your favorite Snappy library.\n  const codecs = {\n    snappy: function (buf, cb) {\n      // Avro appends checksums to compressed blocks, which we skip here.\n      return snappy.uncompress(buf.slice(0, buf.length - 4), cb);\n    }\n  };\n\n  avro.createFileDecoder('./values.avro', {codecs})\n    .on('metadata', function (type) { /* `type` is the writer's type. */ })\n    .on('data', function (val) { /* Do something with the decoded value. */ });\n  ```\n\n+ Implement a TCP server for an [IDL-defined][idl] protocol:\n\n  ```javascript\n  // We first generate a protocol from its IDL specification.\n  const protocol = avro.readProtocol(`\n    protocol LengthService {\n      /** Endpoint which returns the length of the input string. */\n      int stringLength(string str);\n    }\n  `);\n\n  // We then create a corresponding server, implementing our endpoint.\n  const server = avro.Service.forProtocol(protocol)\n    .createServer()\n    .onStringLength(function (str, cb) { cb(null, str.length); });\n\n  // Finally, we use our server to respond to incoming TCP connections!\n  require('net').createServer()\n    .on('connection', (con) => { server.createChannel(con); })\n    .listen(24950);\n  ```\n\n\n[benchmarks]: https://github.com/mtth/avsc/wiki/Benchmarks\n[browser-support]: https://github.com/mtth/avsc/wiki#browser-support\n[browserify]: http://browserify.org/\n[custom-long]: https://github.com/mtth/avsc/wiki/Advanced-usage#custom-long-types\n[decoder-api]: https://github.com/mtth/avsc/wiki/API#class-blockdecoderopts\n[home]: https://github.com/mtth/avsc/wiki\n[idl]: https://avro.apache.org/docs/current/idl.html\n[logical-types]: https://github.com/mtth/avsc/wiki/Advanced-usage#logical-types\n[node.js]: https://nodejs.org/en/\n[readable-stream]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[releases]: https://github.com/mtth/avsc/releases\n[rpc]: https://github.com/mtth/avsc/wiki/Quickstart#services\n[schema-evolution]: https://github.com/mtth/avsc/wiki/Advanced-usage#schema-evolution\n[snappy]: https://avro.apache.org/docs/current/spec.html#snappy\n[type-inference]: https://github.com/mtth/avsc/wiki/Advanced-usage#type-inference\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mtth/avsc.git"
  },
  "scripts": {
    "clean": "rm -rf coverage dist node_modules",
    "cover": "nyc mocha",
    "coverAndPublish": "nyc npm test && nyc report --reporter=text-lcov | coveralls",
    "dist": "./etc/scripts/dist",
    "perf": "./etc/scripts/perf etc/schemas/*",
    "test": "mocha",
    "zuul": "zuul --no-coverage -- test/*.js"
  },
  "types": "./types",
  "version": "5.4.15"
}
